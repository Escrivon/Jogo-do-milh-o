#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>

#define MAX_PERGUNTAS 100

typedef struct {
    char texto[200];
    char alternativa[4][100];
    char letra;
    int dificuldade;
    int ativo;
} Pergunta;

Pergunta* perguntas = NULL;
int totalPerguntas = 0;

void carregarPerguntasCSV(const char* nomeArquivo) {
    FILE* arq = fopen(nomeArquivo, "r");
    if (!arq) {
        printf("Arquivo CSV não encontrado.\n");
        return;
    }

    while (!feof(arq)) {
        Pergunta p;
        if (fscanf(arq, " %199[^,],%99[^,],%99[^,],%99[^,],%99[^,], %c,%d\n",
            p.texto, p.alternativa[0], p.alternativa[1], p.alternativa[2], p.alternativa[3],
            &p.letra, &p.dificuldade) == 7) {
            p.ativo = 1;
            perguntas = realloc(perguntas, (totalPerguntas + 1) * sizeof(Pergunta));
            perguntas[totalPerguntas++] = p;
        }
    }
    fclose(arq);
}

void salvarBinario(const char* nomeArquivo) {
    FILE* arq = fopen(nomeArquivo, "wb");
    if (!arq) return;
    fwrite(&totalPerguntas, sizeof(int), 1, arq);
    fwrite(perguntas, sizeof(Pergunta), totalPerguntas, arq);
    fclose(arq);
}

void carregarBinario(const char* nomeArquivo) {
    FILE* arq = fopen(nomeArquivo, "rb");
    if (!arq) return;
    fread(&totalPerguntas, sizeof(int), 1, arq);
    perguntas = malloc(totalPerguntas * sizeof(Pergunta));
    fread(perguntas, sizeof(Pergunta), totalPerguntas, arq);
    fclose(arq);
}

void exportarCSV(const char* nomeArquivo) {
    FILE* arq = fopen(nomeArquivo, "w");
    if (!arq) return;
    for (int i = 0; i < totalPerguntas; i++) {
        fprintf(arq, "%s,%s,%s,%s,%s,%c,%d\n",
            perguntas[i].texto,
            perguntas[i].alternativa[0],
            perguntas[i].alternativa[1],
            perguntas[i].alternativa[2],
            perguntas[i].alternativa[3],
            perguntas[i].letra,
            perguntas[i].dificuldade);
    }
    fclose(arq);
}
void removerPergunta(int indice) {
    perguntas[indice].ativo = 0;
}

void listarPerguntas() {
    for (int i = 0; i < totalPerguntas; i++) {
        printf("[%d] %s (Dificuldade: %d)\nA)%s B)%s C)%s D)%s\nCorreta: %c\n", 
            i+1, perguntas[i].texto, perguntas[i].dificuldade,
            perguntas[i].alternativa[0],
            perguntas[i].alternativa[1],
            perguntas[i].alternativa[2],
            perguntas[i].alternativa[3],
            perguntas[i].letra);
    }
}

void perguntaAleatoriaPorNivel(int nivel, Pergunta* p) {
    int indices[MAX_PERGUNTAS];
    int cont = 0;

    // Filtra as perguntas ativas com a dificuldade desejada
    for (int i = 0; i < totalPerguntas; i++) {
        if (perguntas[i].ativo && perguntas[i].dificuldade == nivel) {
            indices[cont++] = i;
        }
    }

    if (cont == 0) {
        printf("Não há mais perguntas disponíveis para o nível %d.\n", nivel);
        return;
    }

    // Sorteia uma das perguntas filtradas
    int sorteado = indices[rand() % cont];
    *p = perguntas[sorteado];

    // Marca como inativa para não repetir
    removerPergunta(sorteado);
}//pergunta aleatoria;

void jogar() {
    srand(time(NULL)); // Inicializa a semente do rand

    int totalAcertos = 0;

    // Quantidades por nível
    int perguntasPorNivel[] = {2, 2, 4, 4, 3};

    for (int nivel = 1; nivel <= 5; nivel++) {
        for (int i = 0; i < perguntasPorNivel[nivel - 1]; i++) {

            Pergunta p;
            perguntaAleatoriaPorNivel(nivel, &p);

            // Se não tiver mais perguntas no nível, pula
            if (p.ativo == 0) continue;

            char resp;
            printf("\nNível %d - Pergunta: %s\nA)%s\nB)%s\nC)%s\nD)%s\nSua resposta: ",
                nivel, p.texto, p.alternativa[0], p.alternativa[1], p.alternativa[2], p.alternativa[3]);

            scanf(" %c", &resp);

            if (toupper(resp) == toupper(p.letra)) {
                printf("✅ Correto!\n");
                totalAcertos++;
            } else {
                printf("❌ Errado! Resposta correta: %c\n", p.letra);
                printf("Fim de jogo! Você acertou %d perguntas.\n", totalAcertos);
                return;  // Encerra o jogo no primeiro erro
            }
        }

        if (nivel != 5) { // Não precisa perguntar depois do último nível
            char escolha;
            printf("\nVocê concluiu o nível %d com sucesso!\n", nivel);
            printf("Deseja continuar para o próximo nível? (S/N): ");
            scanf(" %c", &escolha);
            if (toupper(escolha) != 'S') {
                printf("Você desistiu. Total de acertos: %d\n", totalAcertos);
                return;
            }
        }
    }

    printf("\nParabéns! Você completou todas as perguntas com %d acertos.\n", totalAcertos);
}

void menu() {
    int opcao;
    do {
        printf("\n1. Listar Perguntas\n2. Jogar\n3. Exportar CSV\n4. Sair\nEscolha: ");
        scanf("%d", &opcao);
        switch (opcao) {
            case 1: listarPerguntas(); break;
            case 2: jogar(); break;
            case 3: exportarCSV("exportado.csv"); printf("Exportado com sucesso!\n"); break;
            case 4: salvarBinario("perguntas.bin"); printf("Salvando e saindo...\n"); break;
            default: printf("Opção inválida!\n");
        }
    } while (opcao != 4);
}

int main() {
    carregarBinario("perguntas.bin");
    if (totalPerguntas == 0) {
        printf("Bem-vindo! Carregando perguntas do CSV...\n");
        carregarPerguntasCSV("onepiece.csv");
    }
    menu();
    free(perguntas);
    return 0;
}
